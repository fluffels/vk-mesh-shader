#version 450
#extension GL_NV_mesh_shader : require

#include "uniforms.glsl"
#include "quaternion.glsl"
 
layout(local_size_x=1) in;
layout(triangles, max_vertices=4, max_primitives=2) out;

struct Vertex {
  vec4 position;
};

layout(binding=1) readonly buffer Vertices {
  Vertex vertices[];
};
 
layout (location=0) out PerVertexData
{
  vec2 uv;
} v_out[];  // [max_vertices]
 
void main()
{
  const uint i = gl_WorkGroupID.x;
  vec4 p = vertices[i].position;
  const float d = .1f;

  vec4 p0 = vec4(p.x, 0, p.y, 1);

  p0 -= uniforms.eye;
  p0 = rotate_vertex_position(uniforms.rotation, p0);

  if (p0.z > 0) {
    vec4 p1 = vec4(p0.x      , p0.y - 1, p0.z, 1);
    vec4 p2 = vec4(p0.x + 1.f,     p0.y, p0.z, 1);
    vec4 p3 = vec4(p0.x + 1.f, p0.y - 1, p0.z, 1);

    gl_MeshVerticesNV[0].gl_Position = uniforms.proj * p0; 
    gl_MeshVerticesNV[1].gl_Position = uniforms.proj * p1; 
    gl_MeshVerticesNV[2].gl_Position = uniforms.proj * p2; 
    gl_MeshVerticesNV[3].gl_Position = uniforms.proj * p3; 
  
    v_out[0].uv = vec2(0.f + p.z, 0.25f + p.w);
    v_out[1].uv = vec2(0.f + p.z, 0.f + p.w);
    v_out[2].uv = vec2(0.25f + p.z, 0.25f + p.w);
    v_out[3].uv = vec2(0.25f + p.z, 0.f + p.w);
  
    gl_PrimitiveIndicesNV[0] = 0;
    gl_PrimitiveIndicesNV[1] = 1;
    gl_PrimitiveIndicesNV[2] = 2;
    gl_PrimitiveIndicesNV[3] = 2;
    gl_PrimitiveIndicesNV[4] = 1;
    gl_PrimitiveIndicesNV[5] = 3;
  
    gl_PrimitiveCountNV = 2;
  } else {
    gl_PrimitiveCountNV = 0;
  }
}
