#version 450
#extension GL_NV_mesh_shader : require

#include "uniforms.glsl"
#include "quaternion.glsl"
 
layout(local_size_x=1) in;
layout(triangles, max_vertices=15, max_primitives=5) out;

struct Vertex {
  vec4 position;
};

layout(binding=1) readonly buffer Vertices {
  Vertex vertices[];
};
 
layout (location=0) out PerVertexData
{
  vec3 color;
} v_out[];  // [max_vertices]

vec4 lerp(vec4 v0, vec4 v1, float a) {
  return vec4(a*v0.xyz + (1-a)*v1.xyz, 1);
}
 
void main()
{
  const float width = .25f;
  const float halfWidth = width * 0.5f;

  const uint i = gl_WorkGroupID.x;
  vec4 p = vertices[i].position;

  const float rY = p.w;

  vec4 p0 = vec4(p.x, -p.z, p.y, 1);
  p0 -= uniforms.eye;
  p0 = rotate_vertex_position(uniforms.rotation, p0);

  if (p0.z > 0) {
    const float x = halfWidth * cos(rY);
    const float y = halfWidth * sin(rY);

    vec4 p1 = vec4(p.x + x, 0, p.y + y, 1);
    p1 -= uniforms.eye;
    p1 = rotate_vertex_position(uniforms.rotation, p1);

    vec4 p3 = lerp(p0, p1, 0.33f);
    vec4 p5 = lerp(p0, p1, 0.67f);

    vec4 p2 = vec4(p.x - x, 0, p.y - y, 1);
    p2 -= uniforms.eye;
    p2 = rotate_vertex_position(uniforms.rotation, p2);

    vec4 p4 = lerp(p0, p2, 0.33f);
    vec4 p6 = lerp(p0, p2, 0.67f);

    gl_MeshVerticesNV[0].gl_Position = uniforms.proj * p0; 
    gl_MeshVerticesNV[1].gl_Position = uniforms.proj * p1; 
    gl_MeshVerticesNV[2].gl_Position = uniforms.proj * p2; 
    gl_MeshVerticesNV[3].gl_Position = uniforms.proj * p3; 
    gl_MeshVerticesNV[4].gl_Position = uniforms.proj * p4; 
    gl_MeshVerticesNV[5].gl_Position = uniforms.proj * p5; 
    gl_MeshVerticesNV[6].gl_Position = uniforms.proj * p6; 
  
    v_out[0].color = vec3(0, 1, 0);
    v_out[1].color = vec3(0, 0, 0);
    v_out[2].color = vec3(0, 0, 0);
    v_out[3].color = vec3(0, 0.33, 0);
    v_out[4].color = vec3(0, 0.33, 0);
    v_out[5].color = vec3(0, 0.67, 0);
    v_out[6].color = vec3(0, 0.67, 0);
  
    gl_PrimitiveIndicesNV[0] = 3;
    gl_PrimitiveIndicesNV[1] = 1;
    gl_PrimitiveIndicesNV[2] = 2;
  
    gl_PrimitiveIndicesNV[3] = 4;
    gl_PrimitiveIndicesNV[4] = 3;
    gl_PrimitiveIndicesNV[5] = 2;
  
    gl_PrimitiveIndicesNV[6] = 5;
    gl_PrimitiveIndicesNV[7] = 3;
    gl_PrimitiveIndicesNV[8] = 4;
  
    gl_PrimitiveIndicesNV[9] = 6;
    gl_PrimitiveIndicesNV[10] = 5;
    gl_PrimitiveIndicesNV[11] = 4;
  
    gl_PrimitiveIndicesNV[12] = 0;
    gl_PrimitiveIndicesNV[13] = 5;
    gl_PrimitiveIndicesNV[14] = 6;
  
    gl_PrimitiveCountNV = 5;
  } else {
    gl_PrimitiveCountNV = 0;
  }
}
