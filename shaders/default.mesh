#version 450
#extension GL_NV_mesh_shader : require

#include "uniforms.glsl"
#include "quaternion.glsl"
 
layout(local_size_x=1) in;
layout(triangles, max_vertices=15, max_primitives=5) out;

layout(binding=2) uniform sampler2D sp;

struct Vertex {
  vec4 position;
  vec4 rotation;
};

layout(binding=1) readonly buffer Vertices {
  Vertex vertices[];
};
 
layout (location=0) out PerVertexData
{
  vec3 color;
} v_out[];  // [max_vertices]

vec4 lerp(vec4 v0, vec4 v1, float a) {
  return vec4(a*v0.xyz + (1-a)*v1.xyz, 1);
}

vec4 rotate(vec4 p, float rY, float rZ) {
  const float sinRz = sin(rZ);
  const float coAngle = 3.14f / 2.f - rY;

  const float xDelta = cos(coAngle) * sinRz;
  const float zDelta = sin(coAngle) * sinRz;

  vec4 result = vec4(p.x, p.y, p.z, 1);
  result.x += xDelta;
  result.z += zDelta;
  return result;
}

vec4 to_view(vec4 vertex) {
  vertex -= uniforms.eye;
  vertex = rotate_vertex_position(uniforms.rotation, vertex);
  return vertex;
}
 
void main()
{
  const float width = .25f;
  const float halfWidth = width * 0.5f;

  const uint i = gl_WorkGroupID.x;
  Vertex vertex = vertices[i];
  vec4 p = vertex.position;
  vec4 r = vertex.rotation;

  vec4 p0 = rotate(p, r.y, 0);

  if (p0.z > 0) {
    const float x = halfWidth * cos(r.y);
    const float z = halfWidth * sin(r.y);

    vec4 p1 = vec4(p.x + x, 0, p.z + z, 1);
    vec4 p2 = vec4(p.x - x, 0, p.z - z, 1);

    vec4 p3 = lerp(p0, p1, 0.33f);
    vec4 p4 = lerp(p0, p2, 0.33f);

    p0 = rotate(p, r.y, r.z * 0.8f);

    vec4 p5 = lerp(p0, p3, 0.67f);
    vec4 p6 = lerp(p0, p4, 0.67f);

    p0 = rotate(p, r.y, r.z);

    p0 = to_view(p0);
    p1 = to_view(p1);
    p2 = to_view(p2);
    p3 = to_view(p3);
    p4 = to_view(p4);
    p5 = to_view(p5);
    p6 = to_view(p6);

    gl_MeshVerticesNV[0].gl_Position = uniforms.proj * p0; 
    gl_MeshVerticesNV[1].gl_Position = uniforms.proj * p1; 
    gl_MeshVerticesNV[2].gl_Position = uniforms.proj * p2; 
    gl_MeshVerticesNV[3].gl_Position = uniforms.proj * p3; 
    gl_MeshVerticesNV[4].gl_Position = uniforms.proj * p4; 
    gl_MeshVerticesNV[5].gl_Position = uniforms.proj * p5; 
    gl_MeshVerticesNV[6].gl_Position = uniforms.proj * p6; 

    const vec3 black = vec3(0, 0, 0);
    const vec3 green = vec3(0, 0.7, 0);
    const vec3 yellow = vec3(0.7, 0.7, 0);

    vec2 texCoord = vec2(p.w, r.x);
    vec4 texValue = texture(sp, texCoord);
    float noiseValue = texValue.x;

    const vec3 color = mix(green, yellow, noiseValue);
    const vec3 thirdColor = mix(black, color, 0.33);
    const vec3 twoThirdsColor = mix(black, color, 0.67);
  
    v_out[0].color = color;
    v_out[1].color = black;
    v_out[2].color = black;
    v_out[3].color = thirdColor;
    v_out[4].color = thirdColor;
    v_out[5].color = twoThirdsColor;
    v_out[6].color = twoThirdsColor;
  
    gl_PrimitiveIndicesNV[0] = 3;
    gl_PrimitiveIndicesNV[1] = 1;
    gl_PrimitiveIndicesNV[2] = 2;
  
    gl_PrimitiveIndicesNV[3] = 4;
    gl_PrimitiveIndicesNV[4] = 3;
    gl_PrimitiveIndicesNV[5] = 2;
  
    gl_PrimitiveIndicesNV[6] = 5;
    gl_PrimitiveIndicesNV[7] = 3;
    gl_PrimitiveIndicesNV[8] = 4;
  
    gl_PrimitiveIndicesNV[9] = 6;
    gl_PrimitiveIndicesNV[10] = 5;
    gl_PrimitiveIndicesNV[11] = 4;
  
    gl_PrimitiveIndicesNV[12] = 0;
    gl_PrimitiveIndicesNV[13] = 5;
    gl_PrimitiveIndicesNV[14] = 6;
  
    gl_PrimitiveCountNV = 5;
  } else {
    gl_PrimitiveCountNV = 0;
  }
}
